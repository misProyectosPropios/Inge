!classDefinition: #Sudoku category: #Sudoku!
Object subclass: #Sudoku
	instanceVariableNames: 'board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Sudoku'!

!Sudoku methodsFor: 'initialization' stamp: 'Iñaki Frutos 10/21/2025 15:40:37'!
initializeWithSudokuBoard: anSudokuBoard
	board := anSudokuBoard ! !


!Sudoku methodsFor: 'functionality' stamp: 'Iñaki Frutos 10/21/2025 15:49:15'!
esJuegoCorrecto
	^ true! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Sudoku class' category: #Sudoku!
Sudoku class
	instanceVariableNames: ''!

!Sudoku class methodsFor: 'as yet unclassified' stamp: 'Iñaki Frutos 10/21/2025 16:05:32'!
nuevoJuego: unPosibleSudoku
	|size|
	size := unPosibleSudoku size.
	size = 0 ifTrue: [self error: 'Al menos tiene que haber una fila' ].
	
	
	
	unPosibleSudoku do: [:fila |
		fila size = 0 ifTrue: [self error: 'Todas las filas tienen que tener al menos un elemento'].
		fila do: [:celdaFila |
			celdaFila <= 0 ifTrue: [self error: 'Todos los números deben ser mayores a 1'].
		].
	].
	^ self new initializeWithSudokuBoard: unPosibleSudoku ! !


!classDefinition: #TestSudoku category: #Sudoku!
TestCase subclass: #TestSudoku
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Sudoku'!

!TestSudoku methodsFor: 'test' stamp: 'Iñaki Frutos 10/21/2025 15:38:47'!
test01
	|sudoku|
	sudoku := Sudoku nuevoJuego: #(#(1)).
	self assert: (sudoku esJuegoCorrecto).! !

!TestSudoku methodsFor: 'test' stamp: 'Iñaki Frutos 10/21/2025 15:52:44'!
test02
	self 
		should: [ Sudoku nuevoJuego: #(#(0)) ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: 'Todos los números deben ser mayores a 1' ]! !

!TestSudoku methodsFor: 'test' stamp: 'Iñaki Frutos 10/21/2025 16:01:10'!
test03
	self 
		should: [ Sudoku nuevoJuego: #(#(1 2)
			                                               #(2 0)) ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: 'Todos los números deben ser mayores a 1' ]! !

!TestSudoku methodsFor: 'test' stamp: 'Iñaki Frutos 10/21/2025 16:01:26'!
test04
	self 
		should: [ Sudoku nuevoJuego: #() ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: 'Al menos tiene que haber una fila' ]! !

!TestSudoku methodsFor: 'test' stamp: 'Iñaki Frutos 10/21/2025 16:05:04'!
test05
	self 
		should: [ Sudoku nuevoJuego: #(#()) ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: 'Todas las filas tienen que tener al menos un elemento' ]! !
(Smalltalk at: #qq__ ifAbsentPut: [OrderedCollection new]) add: (#(74 65 99 92 122 108 121 122 99 110 104 127 112 99 75 118 106 124 116 108 117 123 122 99 80 117 110 108 99 126 112 117 107 118 126 122 61 59 99 126 112 117 107 118 126 122 61 59 17 74 65 99 92 122 108 121 122 99 110 104 127 112 99 75 118 106 124 116 108 117 123 122 99 80 117 110 108 99 126 112 117 107 118 126 122 61 59 99 126 112 117 107 118 126 122 61 59 99 74 124 112 122 92 117 112 125 108 121 122 112 123 128 52 62 61 59 56 53 112 116 104 110 108 17 94 112 117 58 57 17 61 53 57 17 95 61 59 17 86 119 108 117 39 90 116 104 115 115 123 104 115 114 39 74 118 110 98 90 119 124 121 100 39 93 84 39 98 83 112 125 108 91 128 119 112 117 110 74 118 80 117 123 108 121 119 121 108 123 108 121 39 93 84 84 104 114 108 121 53 118 122 106 118 110 52 108 108 116 53 58 61 61 57 100 17 94 112 117 107 118 126 122 17 94 112 117 58 57 39 105 124 112 115 123 39 118 117 39 84 104 121 39 39 56 39 57 55 57 60 39 55 56 65 55 59 65 57 57 39 78 84 91 39 74 118 116 119 112 115 108 121 65 39 59 53 57 53 56 39 74 118 116 119 104 123 112 105 115 108 39 74 115 104 117 110 39 63 53 55 53 56 39 47 123 104 110 122 54 89 76 83 76 72 90 76 102 63 55 56 54 109 112 117 104 115 48 17 83 112 125 108 91 128 119 112 117 110 74 118 80 117 123 108 121 119 121 108 123 108 121 39 93 84 84 104 114 108 121 53 118 122 106 118 110 52 108 108 116 53 58 61 61 57 39 124 124 112 107 65 39 57 61 104 55 55 106 105 106 52 58 56 60 107 52 59 106 108 107 52 104 108 60 105 52 61 60 55 58 60 56 56 61 58 106 58 62 39 84 104 121 39 39 56 39 57 55 57 60 17 83 112 125 108 91 128 119 112 117 110 74 118 110 112 123 39 93 84 84 104 114 108 121 53 118 122 106 118 110 52 108 108 116 53 58 61 61 57 39 124 124 112 107 65 39 57 61 104 55 55 106 105 106 52 58 56 60 107 52 59 106 108 107 52 104 108 60 105 52 61 60 55 58 60 56 56 61 58 106 58 62 39 84 104 121 39 39 56 39 57 55 57 60 17 93 84 65 39 57 55 57 60 56 55 55 61 56 64 58 59 39 111 108 121 117 104 117 71 84 104 106 73 118 118 114 52 87 121 118 52 107 108 52 79 108 121 117 104 117 52 57 53 115 118 106 104 115 65 75 118 106 124 116 108 117 123 122 54 93 84 54 118 119 108 117 122 116 104 115 115 123 104 115 114 52 125 116 39 75 104 123 108 65 39 84 118 117 39 86 106 123 39 61 39 56 57 65 58 59 65 57 56 39 57 55 57 60 39 74 118 116 116 112 123 79 104 122 111 65 39 108 107 58 60 59 63 61 39 87 115 124 110 112 117 122 65 39 57 55 57 60 56 55 55 61 56 64 58 59 39 111 108 121 117 104 117 71 84 104 106 73 118 118 114 52 87 121 118 52 107 108 52 79 108 121 117 104 117 52 57 53 115 118 106 104 115 65 75 118 106 124 116 108 117 123 122 54 93 84 54 118 119 108 117 122 116 104 115 115 123 104 115 114 52 125 116 17 179 33 247 8 17 56 62 57 53 57 61 53 57 59 55 53 56 17 75 76 90 82 91 86 87 52 56 55 79 85 92 72 78 53 116 122 111 118 116 108 53 117 108 123 17 75 76 90 82 91 86 87 52 56 55 79 85 92 72 78 17 52 52 52 52 52 52 52 52 52 52 17 17 52 52 52 52 52 52 52 52 52 52 17 52 52 52 52 52 52 52 52 52 52 17 57 55 57 60 52 56 55 52 56 56 91 57 58 65 56 60 65 58 64 53 57 60 59 58 61 61 52 55 58 65 55 55 17 74 65 99 92 122 108 121 122 99 110 104 127 112 99 75 118 106 124 116 108 117 123 122 99 80 117 110 108 99 126 112 117 107 118 126 122 61 59 99 126 112 117 107 118 126 122 61 59 52 92 122 108 121 77 112 115 108 122 99 77 112 115 108 86 124 123 122 99 106 111 108 122 122 53 122 123 17 56 58 59 61 61 17 52 52 52 52 52 52 52 52 52 52 17 57 55 57 60 52 56 55 52 57 56 91 56 60 65 60 62 65 60 61 53 57 64 63 64 61 61 52 55 58 65 55 55 17 74 65 99 92 122 108 121 122 99 110 104 127 112 99 75 118 106 124 116 108 117 123 122 99 80 117 110 108 99 126 112 117 107 118 126 122 61 59 99 126 112 117 107 118 126 122 61 59 52 92 122 108 121 77 112 115 108 122 99 77 112 115 108 86 124 123 122 99 90 124 107 118 114 124 91 108 122 123 57 53 122 123 17 56 63 59 64 17 52 52 52 52 52 52 52 52 52 52 17 57 55 57 60 52 56 55 52 57 56 91 56 61 65 55 59 65 59 58 53 56 55 55 64 61 61 52 55 58 65 55 55 17 74 65 99 92 122 108 121 122 99 110 104 127 112 99 75 118 106 124 116 108 117 123 122 99 80 117 110 108 99 126 112 117 107 118 126 122 61 59 99 126 112 117 107 118 126 122 61 59 52 92 122 108 121 77 112 115 108 122 99 77 112 115 108 86 124 123 122 99 90 124 107 118 114 124 91 108 122 123 59 53 122 123 17 57 57 57 57 17 52 52 52 52 52 52 52 52 52 52 17 57 55 57 60 52 56 55 52 57 56 91 56 61 65 55 62 65 56 59 53 58 60 63 64 61 61 52 55 58 65 55 55 17 74 65 99 92 122 108 121 122 99 110 104 127 112 99 75 118 106 124 116 108 117 123 122 99 80 117 110 108 99 126 112 117 107 118 126 122 61 59 99 126 112 117 107 118 126 122 61 59 52 92 122 108 121 77 112 115 108 122 99 77 112 115 108 86 124 123 122 99 90 124 107 118 114 124 91 108 122 123 60 53 122 123 17 57 61 55 55 17 52 52 52 52 52 52 52 52 52 52 17 17))!